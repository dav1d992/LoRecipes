{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthResponseData",
            "id": "interface-AuthResponseData-1c813cf1585529167e97c3ae6a43c9f3537e5dcbb120f324cd10d1cdb1d38c3e0760e9f8c5accbf8c0221e39e822c86072cae350b712a5a80dfccc9a70b134ab",
            "file": "src/app/auth/auth.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\r\n// import { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\n\r\nexport interface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  isRegistered?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User>(null);\r\n  private tokenExpirationTimer: any;\r\n\r\n  constructor(private httpClient: HttpClient, private router: Router) {}\r\n\r\n  signup(email: string, password: string) {\r\n    return this.httpClient\r\n      .post<AuthResponseData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' +\r\n          \"environment.googleApiKey\",\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    console.log(\"environment.googleApiKey\");\r\n    return this.httpClient\r\n      .post<AuthResponseData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' +\r\n          \"environment.googleApiKey\",\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    this.user.next(null);\r\n    this.router.navigate(['/auth']);\r\n    localStorage.removeItem('userData');\r\n    if (this.tokenExpirationTimer) {\r\n      clearTimeout(this.tokenExpirationTimer);\r\n      this.tokenExpirationTimer = null;\r\n    }\r\n  }\r\n\r\n  autoLogout(expirationDuration: number) {\r\n    this.tokenExpirationTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, expirationDuration);\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n    localStorage.setItem('userData', JSON.stringify(user));\r\n  }\r\n\r\n  autoLogin() {\r\n    const userData = JSON.parse(localStorage.getItem('userData'));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n\r\n    const loadedUser = new User(\r\n      userData.email,\r\n      userData.id,\r\n      userData._token,\r\n      new Date(userData._tokenExpirationDate)\r\n    );\r\n\r\n    if (loadedUser.token) {\r\n      this.user.next(loadedUser);\r\n      const expirationDate =\r\n        new Date(userData._tokenExpirationDate).getTime() -\r\n        new Date().getTime();\r\n      this.autoLogout(expirationDate);\r\n    }\r\n  }\r\n\r\n  private handleError(errorResponse: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (!errorResponse.error || !errorResponse.error.error) {\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n    switch (errorResponse.error.error.message) {\r\n      case 'EMAIL_EXISTS':\r\n        errorMessage = 'This email exists already';\r\n        break;\r\n      case 'EMAIL_NOT_FOUND':\r\n        errorMessage = 'This email is not registered';\r\n        break;\r\n      case 'INVALID_PASSWORD':\r\n        errorMessage = 'Wrong password';\r\n        break;\r\n    }\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "expiresIn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "idToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isRegistered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "localId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-1c813cf1585529167e97c3ae6a43c9f3537e5dcbb120f324cd10d1cdb1d38c3e0760e9f8c5accbf8c0221e39e822c86072cae350b712a5a80dfccc9a70b134ab",
            "file": "src/app/auth/auth.service.ts",
            "properties": [
                {
                    "name": "tokenExpirationTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject<User>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "autoLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "autoLogout",
                    "args": [
                        {
                            "name": "expirationDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expirationDuration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAuthentication",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "expiresIn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "errorResponse",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signup",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\r\n// import { environment } from 'src/environments/environment';\r\nimport { User } from '../models/user';\r\n\r\nexport interface AuthResponseData {\r\n  kind: string;\r\n  idToken: string;\r\n  email: string;\r\n  refreshToken: string;\r\n  expiresIn: string;\r\n  localId: string;\r\n  isRegistered?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  user = new BehaviorSubject<User>(null);\r\n  private tokenExpirationTimer: any;\r\n\r\n  constructor(private httpClient: HttpClient, private router: Router) {}\r\n\r\n  signup(email: string, password: string) {\r\n    return this.httpClient\r\n      .post<AuthResponseData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' +\r\n          \"environment.googleApiKey\",\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  login(email: string, password: string) {\r\n    console.log(\"environment.googleApiKey\");\r\n    return this.httpClient\r\n      .post<AuthResponseData>(\r\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' +\r\n          \"environment.googleApiKey\",\r\n        {\r\n          email: email,\r\n          password: password,\r\n          returnSecureToken: true,\r\n        }\r\n      )\r\n      .pipe(\r\n        catchError(this.handleError),\r\n        tap((resData) => {\r\n          this.handleAuthentication(\r\n            resData.email,\r\n            resData.localId,\r\n            resData.idToken,\r\n            +resData.expiresIn\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    this.user.next(null);\r\n    this.router.navigate(['/auth']);\r\n    localStorage.removeItem('userData');\r\n    if (this.tokenExpirationTimer) {\r\n      clearTimeout(this.tokenExpirationTimer);\r\n      this.tokenExpirationTimer = null;\r\n    }\r\n  }\r\n\r\n  autoLogout(expirationDuration: number) {\r\n    this.tokenExpirationTimer = setTimeout(() => {\r\n      this.logout();\r\n    }, expirationDuration);\r\n  }\r\n\r\n  private handleAuthentication(\r\n    email: string,\r\n    userId: string,\r\n    token: string,\r\n    expiresIn: number\r\n  ) {\r\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n    const user = new User(email, userId, token, expirationDate);\r\n    this.user.next(user);\r\n    localStorage.setItem('userData', JSON.stringify(user));\r\n  }\r\n\r\n  autoLogin() {\r\n    const userData = JSON.parse(localStorage.getItem('userData'));\r\n    if (!userData) {\r\n      return;\r\n    }\r\n\r\n    const loadedUser = new User(\r\n      userData.email,\r\n      userData.id,\r\n      userData._token,\r\n      new Date(userData._tokenExpirationDate)\r\n    );\r\n\r\n    if (loadedUser.token) {\r\n      this.user.next(loadedUser);\r\n      const expirationDate =\r\n        new Date(userData._tokenExpirationDate).getTime() -\r\n        new Date().getTime();\r\n      this.autoLogout(expirationDate);\r\n    }\r\n  }\r\n\r\n  private handleError(errorResponse: HttpErrorResponse) {\r\n    let errorMessage = 'An unknown error occurred!';\r\n    if (!errorResponse.error || !errorResponse.error.error) {\r\n      return throwError(() => new Error(errorMessage));\r\n    }\r\n    switch (errorResponse.error.error.message) {\r\n      case 'EMAIL_EXISTS':\r\n        errorMessage = 'This email exists already';\r\n        break;\r\n      case 'EMAIL_NOT_FOUND':\r\n        errorMessage = 'This email is not registered';\r\n        break;\r\n      case 'INVALID_PASSWORD':\r\n        errorMessage = 'Wrong password';\r\n        break;\r\n    }\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecipesService",
            "id": "injectable-RecipesService-9aabdf21f834d5f3062460fdcc548387b06ce0ba2a79c070cc87d2d16eac9a3b0976cbce2f7d47d59ebea7d408bfbc463cd07dec6afdec9ca9cd5bb01bff8b7e",
            "file": "src/app/recipes/recipes.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://lorecipes-default-rtdb.europe-west1.firebasedatabase.app/recipes.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "recipes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "recipesChanged",
                    "defaultValue": "new Subject<Recipe[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "addIngredientsToShoppingList",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setRecipes",
                    "args": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "recipes",
                            "type": "Recipe[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "storeRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateRecipe",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newRecipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { EventEmitter, Injectable } from '@angular/core';\r\nimport { exhaustMap, map, Subject, take, tap } from 'rxjs';\r\nimport { Ingredient } from '../models/ingredient';\r\nimport { Recipe } from '../models/recipe';\r\nimport { ShoppingService } from '../shopping/shopping.service';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { AuthService } from '../auth/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RecipesService {\r\n  baseUrl: string =\r\n    'https://lorecipes-default-rtdb.europe-west1.firebasedatabase.app/recipes.json';\r\n\r\n  recipesChanged = new Subject<Recipe[]>();\r\n  recipes: Recipe[] = [];\r\n\r\n  constructor(\r\n    private shoppingService: ShoppingService,\r\n    private http: HttpClient,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  // recipes: Recipe[] = [\r\n  //   new Recipe(\r\n  //     'Butter Chicken',\r\n  //     'Indian Dish',\r\n  //     'https://s3-eu-west-1.amazonaws.com/images-marleyspoon-production/media/recipes/78426/main_photos/large/indisches_curry_butter_chicken-17fd232d7e2d107442b1530acd1da0bc.jpeg',\r\n  //     [\r\n  //       new Ingredient('Butter', 1),\r\n  //       new Ingredient('Chicken', 1),\r\n  //       new Ingredient('Tomato', 2),\r\n  //     ]\r\n  //   ),\r\n  //   new Recipe(\r\n  //     'Chicken Curry',\r\n  //     'Indian Dish',\r\n  //     'https://tipbuzz.com/wp-content/uploads/Spicy-Chicken-thumbnail-500x500.jpg',\r\n  //     [new Ingredient('Chicken', 1), new Ingredient('Curry', 3)]\r\n  //   ),\r\n  // ];\r\n\r\n  storeRecipes() {\r\n    const recipes = this.getRecipes();\r\n\r\n    this.http.put(this.baseUrl, recipes).subscribe(() => {});\r\n  }\r\n\r\n  public fetchRecipes() {\r\n    return this.authService.user.pipe(\r\n      take(1),\r\n      exhaustMap((user) => {\r\n        return this.http.get<Recipe[]>(this.baseUrl, {\r\n          params: new HttpParams().set('auth', user.token),\r\n        });\r\n      }),\r\n      map((recipes) => {\r\n        return recipes.map((recipe) => {\r\n          return {\r\n            ...recipe,\r\n            ingredients: recipe.ingredients ? recipe.ingredients : [],\r\n          };\r\n        });\r\n      }),\r\n      tap((recipes) => {\r\n        this.setRecipes(recipes);\r\n      })\r\n    );\r\n  }\r\n\r\n  public getRecipes() {\r\n    return this.recipes;\r\n  }\r\n\r\n  public getRecipe(index: number) {\r\n    return this.recipes[index];\r\n  }\r\n\r\n  addIngredientsToShoppingList(ingredients: Ingredient[]) {\r\n    this.shoppingService.addIngredients(ingredients);\r\n  }\r\n\r\n  public addRecipe(recipe: Recipe) {\r\n    this.recipes.push(recipe);\r\n  }\r\n\r\n  public updateRecipe(index: number, newRecipe: Recipe) {\r\n    this.recipes[index] = newRecipe;\r\n  }\r\n\r\n  public deleteRecipe(index: number) {\r\n    this.recipes.splice(index, 1);\r\n  }\r\n\r\n  public setRecipes(recipes: Recipe[]) {\r\n    this.recipes = recipes;\r\n    this.recipesChanged.next(this.recipes);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingService",
            "id": "injectable-ShoppingService-2d757af75b2a69d21f57fe9b228ad1e05ea754f0e8f09c4e451506c3915225a9a417e4cd984e58f30efebb8169d7ca947945071e720c94c971dec62bb8c3d0be",
            "file": "src/app/shopping/shopping.service.ts",
            "properties": [
                {
                    "name": "ingredients",
                    "defaultValue": "[\r\n    new Ingredient('Apples', 3),\r\n    new Ingredient('Carrots', 2),\r\n    new Ingredient('Tomatoes', 15),\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "startedEditing",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "addIngredient",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addIngredients",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredients",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newIngredient",
                            "type": "Ingredient",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Ingredient } from '../models/ingredient';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ShoppingService {\r\n  startedEditing = new Subject<number>();\r\n  ingredients: Ingredient[] = [\r\n    new Ingredient('Apples', 3),\r\n    new Ingredient('Carrots', 2),\r\n    new Ingredient('Tomatoes', 15),\r\n  ];\r\n  constructor() {}\r\n\r\n  getIngredient(index: number) {\r\n    return this.ingredients[index];\r\n  }\r\n\r\n  getIngredients() {\r\n    return this.ingredients;\r\n  }\r\n\r\n  deleteIngredient(index: number) {\r\n    return this.ingredients.splice(index, 1);\r\n  }\r\n\r\n  addIngredient(ingredient: Ingredient) {\r\n    this.ingredients.push(ingredient);\r\n  }\r\n\r\n  addIngredients(ingredients: Ingredient[]) {\r\n    this.ingredients.push(...ingredients);\r\n  }\r\n\r\n  updateIngredient(index: number, newIngredient: Ingredient) {\r\n    this.ingredients[index] = newIngredient;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-7037c74d3cf7fcbe2a10afffb7b746892fd4a73fd3cfedf8bc450d2a4153c7e1844b46341a1f357fd310b8c5af6ce544fc1718afdc634b907aa20edf80f0115a",
            "file": "src/app/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | Promise | Observable",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  Router,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { map, Observable, take, tap } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean | Promise<boolean> | Observable<boolean | UrlTree> {\r\n    return this.authService.user.pipe(\r\n      take(1),\r\n      map((user) => {\r\n        if (!!localStorage.getItem('userData')) {\r\n          return true;\r\n        }\r\n        const isAuth = !!user;\r\n        if (isAuth) {\r\n          return true;\r\n        }\r\n        return this.router.createUrlTree(['/auth']);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "RecipesResolverService",
            "id": "injectable-RecipesResolverService-cff6b8b93719f28acda42cc4a331b65783b5f5dc8d1b7d9cd0b4f97a9ddd512842542f097d7f78ca7beb02856efb890e0a7c68eb72c2b2097bb498fd0c11286a",
            "file": "src/app/recipes/recipes-resolver.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "resolve",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Resolve,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { Recipe } from '../models/recipe';\r\nimport { RecipesService } from './recipes.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RecipesResolverService implements Resolve<Recipe[]> {\r\n  constructor(private recipesService: RecipesService) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    const recipes = this.recipesService.getRecipes();\r\n\r\n    if (recipes.length === 0) {\r\n      return this.recipesService.fetchRecipes();\r\n    } else {\r\n      return recipes;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthIntercepterService",
            "id": "injectable-AuthIntercepterService-6b89831f3b9368db448f75cbc2b77c07accd1d06fa899c863238e44113076182ad5d00b4e1b24a7b63eaa0913c0f20db3237cfab05c95ad0b9ced348e989d1c9",
            "file": "src/app/auth/auth-intercepter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpParams,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { exhaustMap, Observable, take } from 'rxjs';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthIntercepterService implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    return this.authService.user.pipe(\r\n      take(1),\r\n      exhaustMap((user) => {\r\n        const modifiedReq = req.clone({\r\n          params: new HttpParams().set('auth', user.token),\r\n        });\r\n        return next.handle(modifiedReq);\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Ingredient",
            "id": "class-Ingredient-cb4f79778ae6f71d2c0c051ec210006d57404d40643a2f66a6eb153867ae0669df35ca947f5d266a7315a2d2ba20e2a2497d0689a76fc39abe62f3b139e861c4",
            "file": "src/app/models/ingredient.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Ingredient {\r\n  constructor(public name: string, public amount: number) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "amount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "amount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MockRecipesService",
            "id": "class-MockRecipesService-1efd843c1e8a254f186e786c839ee526f77d2ccdc1c93233a0f539fc17c19663f626a945d02f7dda535a2cc0131e842d3c2e762da23ee5078d50252410778ec0",
            "file": "src/stories/components/Header/Header.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Story, Meta, moduleMetadata } from '@storybook/angular';\nimport { Observable } from 'rxjs';\n\nimport { HeaderComponent } from 'src/app/header/header.component';\nimport { Ingredient } from 'src/app/models/ingredient';\nimport { Recipe } from 'src/app/models/recipe';\nimport { RecipesModule } from 'src/app/recipes/recipes.module';\nimport { RecipesService } from 'src/app/recipes/recipes.service';\n\nexport default {\n  title: 'Example/Header',\n  component: HeaderComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [RecipesModule],\n      // declarations: [AppComponent]\n    })\n  ],\n  parameters: {\n    // More on Story layout: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n} as Meta;\n\n\nclass MockRecipesService implements Partial<RecipesService> {\n  // fetchRecipes(): Observable<{ ingredients: Ingredient[]; name: string; description: string; imagePath: string; }[]> {\n    \n  // } = () => {},\n  \n  storeRecipes = () => [\n    new Recipe(\n      'Butter Chicken',\n      'Indian Dish',\n      'https://s3-eu-west-1.amazonaws.com/images-marleyspoon-production/media/recipes/78426/main_photos/large/indisches_curry_butter_chicken-17fd232d7e2d107442b1530acd1da0bc.jpeg',\n      [\n        new Ingredient('Butter', 1),\n        new Ingredient('Chicken', 1),\n        new Ingredient('Tomato', 2),\n      ]\n    ),\n    new Recipe(\n      'Chicken Curry',\n      'Indian Dish',\n      'https://tipbuzz.com/wp-content/uploads/Spicy-Chicken-thumbnail-500x500.jpg',\n      [new Ingredient('Chicken', 1), new Ingredient('Curry', 3)]\n    ),\n  ]\n}\n\nconst Template: Story<HeaderComponent> = (args: HeaderComponent) => ({\n  moduleMetadata: {\n    providers: [\n      { provide: RecipesService, useClass: MockRecipesService }\n    ]\n  },\n  component: HeaderComponent,\n  props: args,\n});\n\nexport const WithLayout = Template.bind({}); \nWithLayout.parameters = {\n  layout: 'centered',\n}\n",
            "properties": [
                {
                    "name": "storeRecipes",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Partial"
            ]
        },
        {
            "name": "Recipe",
            "id": "class-Recipe-c554e3f9654130110f50fe6c33ffbbae4fb5efb1f4d48b2bdb631628ca491c5fd6d53064db961169ab02fec86972cbe7382f3c2cb732ac964c5441399e373dcf",
            "file": "src/app/models/recipe.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Ingredient } from './ingredient';\r\n\r\nexport class Recipe {\r\n  constructor(\r\n    public name: string,\r\n    public description: string,\r\n    public imagePath: string,\r\n    public ingredients: Ingredient[]\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imagePath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 3,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "description",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imagePath",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ingredients",
                        "type": "Ingredient[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-407288a83606554538f43181ff4b7277705f3d1ae2de5e930596f91e3f032bb26888f847f94f0f6712dc55380c140c6f26e757e8ec6df4daaed842b743d30a94",
            "file": "src/app/models/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n  constructor(\r\n    public email: string,\r\n    public id: string,\r\n    private _token: string,\r\n    private _tokenExpirationDate: Date\r\n  ) {}\r\n\r\n  get token() {\r\n    if (!this._tokenExpirationDate || new Date() > this._tokenExpirationDate) {\r\n      return null;\r\n    }\r\n    return this._token;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "email",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "id",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_tokenExpirationDate",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "accessors": {
                "token": {
                    "name": "token",
                    "getSignature": {
                        "name": "token",
                        "type": "",
                        "returnType": "",
                        "line": 9
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DropdownDirective",
            "id": "directive-DropdownDirective-b1ef6dc60465b205be1c3903b224c3229f70b3fdce4998e0699ac806e0cd6a1b4c34bf7958091611dfd37f03ae9bbae33a6bd49b6da0f446fae245b1436d0e57",
            "file": "src/app/directives/dropdown.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, HostListener, OnInit } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDropdown]',\r\n})\r\nexport class DropdownDirective implements OnInit {\r\n  @HostBinding('class.open') isOpen = false;\r\n\r\n  @HostListener('click') toggleOpen() {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "selector": "[appDropdown]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.open",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9
                }
            ],
            "propertiesClass": [
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.open'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            }
        }
    ],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-c481354969cd79781c9cca40cb3936acb40ecd034eb2b22394d5a69fd6d85c94e5cfdff4c5f4ad1a0cdb8dd13369d4517787e155f0633db58f5a531d82be1139",
            "file": "src/app/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.css'],\r\n})\r\nexport class AlertComponent implements OnInit {\r\n  @Input() message: string;\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  onClose() {\r\n    this.close.emit();\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".backdrop {\r\n    position: fixed; \r\n    top: 0; \r\n    left: 0; \r\n    width: 100vw; \r\n    height: 100vh;\r\n    background: rgba(0, 0, 0, 0.75);\r\n    z-index: 50;\r\n}\r\n\r\n.alert-box {\r\n    position: fixed; \r\n    top: 30vh; \r\n    left: 20vw; \r\n    width: 60vw; \r\n    padding: 16px;\r\n    background: white;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.25);\r\n}\r\n\r\n.alert-box-actions {\r\n    text-align: right;\r\n}",
                    "styleUrl": "./alert.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"backdrop\" (click)=\"onClose()\"></div>\r\n<div class=\"alert-box\">\r\n  <p>{{ message }}</p>\r\n  <div class=\"alert-box-actions\">\r\n    <button class=\"btn btn-primary\" (click)=\"onClose()\">Close</button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-4226418e29d8c6cc94ee030304596b40bdf316917424b618b88f40d51e9a1f9a7595134e858c916f87056e4248fda03742dbbac93c61c862f25559638edf0dc7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isBrowser",
                    "defaultValue": "new BehaviorSubject<boolean>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\r\nimport { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { AuthService } from './auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  static isBrowser = new BehaviorSubject<boolean>(null);\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    @Inject(PLATFORM_ID) private platformId\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.authService.autoLogin();\r\n\r\n    // AppComponent.isBrowser.next(isPlatformBrowser(this.platformId));\r\n    // if (isPlatformBrowser(this.platformId)) {\r\n    //   this.authService.autoLogin();\r\n    // }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <div class=\"col-md-12\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-c98a7ae3d94df7512c5e0105952686642659039b082854d13b49b5b947b23c58ab0a13329820907d57cafc73377879893be4325a6e2a37bf4c53aabce1ef98bf",
            "file": "src/app/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoginMode",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onHandleError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSwitchMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showErrorAlert",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthResponseData, AuthService } from './auth.service';\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.css'],\r\n})\r\nexport class AuthComponent implements OnInit {\r\n  isLoginMode = true;\r\n  isLoading = false;\r\n  error: string = null;\r\n\r\n  constructor(private authService: AuthService, private router: Router) {}\r\n\r\n  onSwitchMode() {\r\n    this.isLoginMode = !this.isLoginMode;\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    if (!form.valid) {\r\n      return;\r\n    }\r\n    const email = form.value.email;\r\n    const password = form.value.password;\r\n\r\n    let authObservable: Observable<AuthResponseData>;\r\n\r\n    this.isLoading = true;\r\n\r\n    if (this.isLoginMode) {\r\n      authObservable = this.authService.login(email, password);\r\n    } else {\r\n      authObservable = this.authService.signup(email, password);\r\n    }\r\n\r\n    authObservable.subscribe({\r\n      next: (resData) => {\r\n        console.log(resData);\r\n        this.isLoading = false;\r\n        this.router.navigate(['/recipes']);\r\n      },\r\n      error: (errorMessage) => {\r\n        this.error = errorMessage;\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n\r\n    form.reset();\r\n  }\r\n\r\n  onHandleError() {\r\n    this.error = null;\r\n  }\r\n\r\n  showErrorAlert(message: string) {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-12 col-md-6 col-md-offset-3\">\r\n    <!-- <div *ngIf=\"error\" class=\"alert alert-danger\">\r\n      <p>{{ error }}</p>\r\n    </div> -->\r\n    <app-alert\r\n      [message]=\"error\"\r\n      *ngIf=\"error\"\r\n      (close)=\"onHandleError()\"\r\n    ></app-alert>\r\n    <div *ngIf=\"isLoading\" style=\"text-align: center\">\r\n      <app-loading-spinner></app-loading-spinner>\r\n    </div>\r\n    <form *ngIf=\"!isLoading\" #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">E-Mail</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          class=\"form-control\"\r\n          ngModel\r\n          name=\"email\"\r\n          required\r\n          email\r\n        />\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"password\">Password</label>\r\n        <input\r\n          type=\"password\"\r\n          id=\"password\"\r\n          class=\"form-control\"\r\n          ngModel\r\n          name=\"password\"\r\n          required\r\n          minlength=\"6\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button\r\n          class=\"btn btn-primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"!authForm.valid\"\r\n        >\r\n          {{ isLoginMode ? \"Login\" : \"Sign up\" }}\r\n        </button>\r\n        |\r\n        <button class=\"btn btn-primary\" type=\"button\" (click)=\"onSwitchMode()\">\r\n          Switch to {{ isLoginMode ? \"Login\" : \"Sign up\" }}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/components/Button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a194672b9810d3e3ab733319b03fc07b22909309001fab7fe398ea721deaa8ef0f1ec3b03286d42e44254d891f507dfcba33a762d40fe90da7b87c772f3864c2",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "userSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFetchData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { RecipesService } from '../recipes/recipes.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n  collapsed = true;\r\n  isAuthenticated = false;\r\n  private userSub: Subscription;\r\n\r\n  constructor(\r\n    private recipesService: RecipesService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.userSub = this.authService.user.subscribe((user) => {\r\n      this.isAuthenticated = !!user;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.userSub.unsubscribe();\r\n  }\r\n\r\n  onSaveData() {\r\n    this.recipesService.storeRecipes();\r\n  }\r\n\r\n  onFetchData() {\r\n    this.recipesService.fetchRecipes().subscribe();\r\n  }\r\n\r\n  onLogout() {\r\n    this.authService.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<nav class=\"navbar navbar-default\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"navbar-header\">\r\n      <button\r\n        type=\"button\"\r\n        class=\"navbar-toggle\"\r\n        (click)=\"collapsed = !collapsed\"\r\n      >\r\n        <span class=\"icon-bar\" *ngFor=\"let iconBar of [1, 2, 3]\"></span>\r\n      </button>\r\n      <a routerLink=\"/\" class=\"navbar-brand\">Recipe Book</a>\r\n    </div>\r\n    <div\r\n      class=\"navbar-collapse\"\r\n      [class.collapse]=\"collapsed\"\r\n      (window:resize)=\"collapsed = true\"\r\n    >\r\n      <ul class=\"nav navbar-nav\">\r\n        <li routerLinkActive=\"active\" *ngIf=\"isAuthenticated\">\r\n          <a routerLink=\"/recipes\">Recipes</a>\r\n        </li>\r\n        <li routerLinkActive=\"active\" *ngIf=\"!isAuthenticated\">\r\n          <a routerLink=\"/auth\">Auth</a>\r\n        </li>\r\n        <li routerLinkActive=\"active\">\r\n          <a routerLink=\"/shopping\">Shopping List</a>\r\n        </li>\r\n      </ul>\r\n      <ul class=\"nav navbar-nav navbar-right\">\r\n        <li *ngIf=\"isAuthenticated\">\r\n          <a style=\"cursor: pointer\" (click)=\"onLogout()\">Logout</a>\r\n        </li>\r\n        <li class=\"dropdown\" appDropdown *ngIf=\"isAuthenticated\">\r\n          <a style=\"cursor: pointer\" class=\"dropdown-toggle\"\r\n            >Manage <span class=\"caret\"></span\r\n          ></a>\r\n          <ul class=\"dropdown-menu\">\r\n            <li>\r\n              <a style=\"cursor: pointer\" (click)=\"onSaveData()\"> Save data </a>\r\n            </li>\r\n            <li>\r\n              <a style=\"cursor: pointer\" (click)=\"onFetchData()\">\r\n                Fetch data\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-4a4c721f03c9feae581d02c8901a546130d740f991a32c39f0fb34df02ec3d685d1f4d6d08d8ace9f919c040839bd894261e71005e97737c73881cb67683247e-1",
            "file": "src/stories/components/Header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from '../../User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1"
        },
        {
            "name": "LoadingSpinnerComponent",
            "id": "component-LoadingSpinnerComponent-5151549a48e9f0a529b09a67e3edd6d48100357398491df58475c345f6f83bf78473f29445b29ec3e7e79f5eff76e2f47efddc4d3f3245e20f98a2cce12c4352",
            "file": "src/app/loading-spinner/loading-spinner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading-spinner",
            "styleUrls": [
                "./loading-spinner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./loading-spinner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.css']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".lds-hourglass {\r\n    display: inline-block;\r\n    position: relative;\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n  .lds-hourglass:after {\r\n    content: \" \";\r\n    display: block;\r\n    border-radius: 50%;\r\n    width: 0;\r\n    height: 0;\r\n    margin: 8px;\r\n    box-sizing: border-box;\r\n    border: 32px solid rgb(255, 0, 0);\r\n    border-color: rgb(0, 255, 55) transparent rgb(47, 0, 255) transparent;\r\n    animation: lds-hourglass 1.2s infinite;\r\n  }\r\n  @keyframes lds-hourglass {\r\n    0% {\r\n      transform: rotate(0);\r\n      animation-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);\r\n    }\r\n    50% {\r\n      transform: rotate(900deg);\r\n      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n    }\r\n    100% {\r\n      transform: rotate(1800deg);\r\n    }\r\n  }",
                    "styleUrl": "./loading-spinner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"lds-hourglass\"></div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "RecipeDetailComponent",
            "id": "component-RecipeDetailComponent-6525b32104a1c55ef7cd651c0392d2a77727fa76c73c0a6020c80072f3880983937ae73ed72c163e7a71542c0caf000d6c58d92e92033757850a67ecbdd25a63",
            "file": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-detail",
            "styleUrls": [
                "./recipe-detail.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddToShoppingList",
                    "args": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "type": "Ingredient[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Ingredient } from 'src/app/models/ingredient';\r\nimport { Recipe } from 'src/app/models/recipe';\r\nimport { RecipesService } from '../recipes.service';\r\n\r\n@Component({\r\n  selector: 'app-recipe-detail',\r\n  templateUrl: './recipe-detail.component.html',\r\n  styleUrls: ['./recipe-detail.component.css'],\r\n})\r\nexport class RecipeDetailComponent implements OnInit {\r\n  recipe: Recipe;\r\n  id: number;\r\n  constructor(\r\n    private recipesService: RecipesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe((params: Params) => {\r\n      this.id = +params['id'];\r\n      this.recipe = this.recipesService.getRecipe(this.id);\r\n    });\r\n  }\r\n\r\n  onAddToShoppingList(ingredients: Ingredient[]) {\r\n    this.recipesService.addIngredientsToShoppingList(ingredients);\r\n  }\r\n\r\n  onEditRecipe() {\r\n    this.router.navigate(['edit'], { relativeTo: this.route });\r\n  }\r\n\r\n  onDeleteRecipe() {\r\n    this.recipesService.deleteRecipe(this.id);\r\n    this.router.navigate(['/recipes']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-detail.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <img\r\n      [src]=\"recipe.imagePath\"\r\n      alt=\"{{ recipe.name }}\"\r\n      class=\"img-responsive\"\r\n      style=\"max-height: 300px\"\r\n    />\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <h1>{{ recipe.name }}</h1>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <div class=\"btn-group\" appDropdown>\r\n      <button type=\"button\" class=\"btn btn-primary dropdown-toggle\">\r\n        Manage Recipe <span class=\"caret\"></span>\r\n      </button>\r\n      <ul class=\"dropdown-menu\">\r\n        <li>\r\n          <a\r\n            (click)=\"onAddToShoppingList(recipe.ingredients)\"\r\n            style=\"cursor: pointer\"\r\n            >To shopping list</a\r\n          >\r\n        </li>\r\n        <li>\r\n          <a style=\"cursor: pointer\" (click)=\"onEditRecipe()\">Edit recipe</a>\r\n        </li>\r\n        <li>\r\n          <a style=\"cursor: pointer\" (click)=\"onDeleteRecipe()\"\r\n            >Delete recipe</a\r\n          >\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    {{ recipe.description }}\r\n  </div>\r\n</div>\r\n<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <ul class=\"list-group\">\r\n      <li class=\"list-group-item\" *ngFor=\"let ingredient of recipe.ingredients\">\r\n        {{ ingredient.name }} - {{ ingredient.amount }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecipeEditComponent",
            "id": "component-RecipeEditComponent-7018f0120b4e8fe745212b00652715e4539bd52f1737d25734bf9d1d186912b49c4fe431101120b9c96469ccb02175a40aa8fbb4d77cef407cfc125c7feb5d85",
            "file": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-edit",
            "styleUrls": [
                "./recipe-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "recipeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAddIngredient",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params, Router } from '@angular/router';\r\nimport { Recipe } from 'src/app/models/recipe';\r\nimport { RecipesService } from '../recipes.service';\r\n\r\n@Component({\r\n  selector: 'app-recipe-edit',\r\n  templateUrl: './recipe-edit.component.html',\r\n  styleUrls: ['./recipe-edit.component.css'],\r\n})\r\nexport class RecipeEditComponent implements OnInit {\r\n  id: number;\r\n  editMode: boolean;\r\n  recipeForm: FormGroup;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private recipesService: RecipesService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.route.params.subscribe((params: Params) => {\r\n      this.id = +params['id'];\r\n      this.editMode = params['id'];\r\n      this.initForm();\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    // *** this is the same as using this.recipeForm.value ***\r\n    // const newRecipe = new Recipe(\r\n    //   this.recipeForm.value['name'],\r\n    //   this.recipeForm.value['description'],\r\n    //   this.recipeForm.value['imagePath'],\r\n    //   this.recipeForm.value['ingredients']\r\n    // );\r\n\r\n    if (this.editMode) {\r\n      this.recipesService.updateRecipe(this.id, this.recipeForm.value);\r\n    } else {\r\n      this.recipesService.addRecipe(this.recipeForm.value);\r\n    }\r\n    this.onCancel();\r\n  }\r\n\r\n  onSave() {}\r\n\r\n  onDelete() {\r\n    this.recipesService.deleteRecipe(this.id);\r\n  }\r\n\r\n  onCancel() {\r\n    this.router.navigate(['../'], { relativeTo: this.route });\r\n  }\r\n\r\n  onAddIngredient() {\r\n    (<FormArray>this.recipeForm.get('ingredients')).push(\r\n      new FormGroup({\r\n        name: new FormControl(null, Validators.required),\r\n        amount: new FormControl(null, [\r\n          Validators.required,\r\n          Validators.pattern(/^[1-9]+[0-9]*$/),\r\n        ]),\r\n      })\r\n    );\r\n  }\r\n\r\n  onDeleteIngredient(index: number) {\r\n    (<FormArray>this.recipeForm.get('ingredients')).removeAt(index);\r\n  }\r\n\r\n  get controls() {\r\n    // a getter!\r\n    return (<FormArray>this.recipeForm.get('ingredients')).controls;\r\n  }\r\n\r\n  private initForm() {\r\n    let recipeName = '';\r\n    let recipeImagePath = '';\r\n    let recipeDescription = '';\r\n    let recipeIngredients = new FormArray([]);\r\n\r\n    if (this.editMode) {\r\n      const recipe = this.recipesService.getRecipe(this.id);\r\n      recipeName = recipe.name;\r\n      recipeImagePath = recipe.imagePath;\r\n      recipeDescription = recipe.description;\r\n      if (recipe.ingredients.length > 0) {\r\n        for (let ingredient of recipe.ingredients) {\r\n          recipeIngredients.push(\r\n            new FormGroup({\r\n              name: new FormControl(ingredient.name, Validators.required),\r\n              amount: new FormControl(ingredient.amount, [\r\n                Validators.required,\r\n                Validators.pattern(/^[1-9]+[0-9]*$/),\r\n              ]),\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    this.recipeForm = new FormGroup({\r\n      name: new FormControl(recipeName, Validators.required),\r\n      imagePath: new FormControl(recipeImagePath, Validators.required),\r\n      description: new FormControl(recipeDescription, Validators.required),\r\n      ingredients: recipeIngredients,\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "input.ng-invalid.ng-touched,\r\ntextarea.ng-invalid.ng-touched {\r\n    border: 1px solid red;\r\n}",
                    "styleUrl": "./recipe-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 74
                    }
                }
            },
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <form [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <button\r\n            type=\"submit\"\r\n            class=\"btn btn-success\"\r\n            [disabled]=\"!recipeForm.valid\"\r\n          >\r\n            Save\r\n          </button>\r\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onCancel()\">\r\n            Cancel\r\n          </button>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12\">\r\n              <div class=\"form-group\">\r\n                <label for=\"name\"> Name </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  class=\"form-control\"\r\n                  formControlName=\"name\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12\">\r\n              <div class=\"form-group\">\r\n                <label for=\"imagePath\"> Image Path </label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"imagePath\"\r\n                  class=\"form-control\"\r\n                  formControlName=\"imagePath\"\r\n                  #imagePath\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12\">\r\n              <img [src]=\"imagePath.value\" class=\"img-responsive\" />\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12\">\r\n              <div class=\"form-group\">\r\n                <label for=\"description\"> Description </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"description\"\r\n                  class=\"form-control\"\r\n                  rows=\"6\"\r\n                  formControlName=\"description\"\r\n                >\r\n                </textarea>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"row\">\r\n            <div class=\"col-xs-12\" formArrayName=\"ingredients\">\r\n              <div\r\n                class=\"row\"\r\n                *ngFor=\"let ingredientCtrl of controls; let i = index\"\r\n                [formGroupName]=\"i\"\r\n                style=\"margin-top: 10px\"\r\n              >\r\n                <div class=\"col-xs-8\">\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    formControlName=\"name\"\r\n                  />\r\n                </div>\r\n                <div class=\"col-xs-2\">\r\n                  <input\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    formControlName=\"amount\"\r\n                  />\r\n                </div>\r\n                <div class=\"col-xs-2\">\r\n                  <button\r\n                    class=\"btn btn-danger\"\r\n                    type=\"button\"\r\n                    (click)=\"onDeleteIngredient(i)\"\r\n                  >\r\n                    X\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-xs-2\">\r\n                  <button\r\n                    class=\"btn btn-success\"\r\n                    type=\"button\"\r\n                    (click)=\"onAddIngredient()\"\r\n                  >\r\n                    Add Ingredient\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecipeListComponent",
            "id": "component-RecipeListComponent-809d5d59e197ae5f27fd8a36b52eeaa6e92afb441954d85b9ccd33f5007e26e425cc13d3b7460b04747b6c2591c276649178d5f83953f68abffe04f40a481cd8",
            "file": "src/app/recipes/recipe-list/recipe-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list",
            "styleUrls": [
                "./recipe-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recipes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNewRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { Recipe } from 'src/app/models/recipe';\r\nimport { RecipesService } from '../recipes.service';\r\n\r\n@Component({\r\n  selector: 'app-recipe-list',\r\n  templateUrl: './recipe-list.component.html',\r\n  styleUrls: ['./recipe-list.component.css'],\r\n})\r\nexport class RecipeListComponent implements OnInit, OnDestroy {\r\n  recipes: Recipe[];\r\n  subscription: Subscription;\r\n\r\n  constructor(\r\n    private recipesService: RecipesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription = this.recipesService.recipesChanged.subscribe(\r\n      (recipes: Recipe[]) => {\r\n        this.recipes = recipes;\r\n      }\r\n    );\r\n    this.recipes = this.recipesService.getRecipes();\r\n  }\r\n\r\n  onNewRecipe() {\r\n    this.router.navigate(['new'], { relativeTo: this.route });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "recipesService",
                        "type": "RecipesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <button class=\"btn btn-success\" (click)=\"onNewRecipe()\">New Recipe</button>\r\n  </div>\r\n</div>\r\n<hr />\r\n<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <app-recipe-list-item\r\n      *ngFor=\"let recipeElement of recipes; let i = index\"\r\n      [recipe]=\"recipeElement\"\r\n      [index]=\"i\"\r\n    ></app-recipe-list-item>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecipeListItemComponent",
            "id": "component-RecipeListItemComponent-338bb0c5c7d164f02eb1ea4042b963f26dd393e0704a79cd02b54b9648aaf24444c278279b59321d57631b8d90a6087aadbde9fdcec13c33af5e62ecaf4772cd",
            "file": "src/app/recipes/recipe-list/recipe-list-item/recipe-list-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list-item",
            "styleUrls": [
                "./recipe-list-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-list-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "recipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Recipe",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { Recipe } from 'src/app/models/recipe';\r\n\r\n@Component({\r\n  selector: 'app-recipe-list-item',\r\n  templateUrl: './recipe-list-item.component.html',\r\n  styleUrls: ['./recipe-list-item.component.css'],\r\n})\r\nexport class RecipeListItemComponent implements OnInit {\r\n  @Input() recipe: Recipe;\r\n  @Input() index: number;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-list-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<a\r\n  style=\"cursor: pointer\"\r\n  class=\"list-group-item clearfix\"\r\n  [routerLink]=\"[index]\"\r\n  routerLinkActive=\"active\"\r\n>\r\n  <div class=\"pull-left\">\r\n    <h4 class=\"list-group-item-heading\">{{ recipe.name }}</h4>\r\n    <p class=\"list-group-item-text\">{{ recipe.description }}</p>\r\n  </div>\r\n  <span class=\"pull-right\">\r\n    <img\r\n      src=\"{{ recipe.imagePath }}\"\r\n      alt=\"\"\r\n      class=\"img-responsive\"\r\n      style=\"max-height: 50px\"\r\n    />\r\n  </span>\r\n</a>\r\n"
        },
        {
            "name": "RecipesComponent",
            "id": "component-RecipesComponent-bebc5591940151a7e512b7c05790a872a7fa172ed51908c3f8a1eca8f7a7ea3921a7e6fcaf1dc5a2d637c39783a058d35ee62d407b43103e89f154fae9a69819",
            "file": "src/app/recipes/recipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipes",
            "styleUrls": [
                "./recipes.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedRecipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectedRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Recipe } from '../models/recipe';\r\n\r\n@Component({\r\n  selector: 'app-recipes',\r\n  templateUrl: './recipes.component.html',\r\n  styleUrls: ['./recipes.component.css'],\r\n})\r\nexport class RecipesComponent implements OnInit {\r\n  selectedRecipe: Recipe;\r\n\r\n  setSelectedRecipe(recipe: Recipe) {\r\n    this.selectedRecipe = recipe;\r\n  }\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit() {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipes.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-md-5\">\r\n    <app-recipe-list></app-recipe-list>\r\n  </div>\r\n  <div class=\"col-md-7\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "RecipeStartComponent",
            "id": "component-RecipeStartComponent-728807d77ba33b5e11a9f177b119da7cd80bb48a4c6c0b7c1554088c6446a3b7b317eec592d0f11e9267e670d122587814d349c84cc4f0e5e706a86e2826c4f5",
            "file": "src/app/recipes/recipe-start/recipe-start.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-start",
            "styleUrls": [
                "./recipe-start.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-start.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-recipe-start',\r\n  templateUrl: './recipe-start.component.html',\r\n  styleUrls: ['./recipe-start.component.css']\r\n})\r\nexport class RecipeStartComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-start.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3>Please select a recipe!</h3>\r\n"
        },
        {
            "name": "ShoppingComponent",
            "id": "component-ShoppingComponent-41a99fdf71b4ef1246b8c0969c4f4292c659ef1f1e4ed8f69bd6d2276de465199fef940abbec98c6b99545fcf1520f3618a08acf35b7131e386df4991accd987",
            "file": "src/app/shopping/shopping.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping",
            "styleUrls": [
                "./shopping.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-shopping',\r\n  templateUrl: './shopping.component.html',\r\n  styleUrls: ['./shopping.component.css']\r\n})\r\nexport class ShoppingComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-shopping-list>"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-cc119eb7dd38e330fb67f802e7dec934c67cfb1b50bc2bcd990f42a75d710889a364fb99008b8cd650d9a81bb15c4ee6bc1764fbe1b9eacb2753f4c2b83afd6d",
            "file": "src/app/shopping/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ingredients",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onEditItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Ingredient } from '../../models/ingredient';\r\nimport { ShoppingService } from '../shopping.service';\r\n\r\n@Component({\r\n  selector: 'app-shopping-list',\r\n  templateUrl: './shopping-list.component.html',\r\n  styleUrls: ['./shopping-list.component.css'],\r\n})\r\nexport class ShoppingListComponent implements OnInit {\r\n  ingredients: Ingredient[];\r\n\r\n  constructor(private shoppingService: ShoppingService) {}\r\n\r\n  ngOnInit() {\r\n    this.ingredients = this.shoppingService.getIngredients();\r\n  }\r\n\r\n  onEditItem(index: number) {\r\n    this.shoppingService.startedEditing.next(index);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-10\">\r\n    <app-shopping-list-edit></app-shopping-list-edit>\r\n    <hr />\r\n    <ul class=\"list-group\">\r\n      <a\r\n        class=\"list-group-item\"\r\n        style=\"cursor: pointer\"\r\n        *ngFor=\"let ingredient of ingredients; let i = index\"\r\n        (click)=\"onEditItem(i)\"\r\n      >\r\n        {{ ingredient.name }} ({{ ingredient.amount }})\r\n      </a>\r\n    </ul>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ShoppingListEditComponent",
            "id": "component-ShoppingListEditComponent-032267f0297a8278319b22ff9890f96e64a35a9be95f4b6adc566eeb5f135c43dd9920a87fcb2899968674d3327fd59e55372e5cd5a366279c6507e3babefc2c",
            "file": "src/app/shopping/shopping-list/shopping-list-edit/shopping-list-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-edit",
            "styleUrls": [
                "./shopping-list-edit.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "editedItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Ingredient",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "editedItemIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shoppingListForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgForm",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'f'"
                        }
                    ]
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { Ingredient } from 'src/app/models/ingredient';\r\nimport { ShoppingService } from '../../shopping.service';\r\n\r\n@Component({\r\n  selector: 'app-shopping-list-edit',\r\n  templateUrl: './shopping-list-edit.component.html',\r\n  styleUrls: ['./shopping-list-edit.component.css'],\r\n})\r\nexport class ShoppingListEditComponent implements OnInit, OnDestroy {\r\n  @ViewChild('f') shoppingListForm: NgForm;\r\n  subscription: Subscription;\r\n  editMode: boolean = false;\r\n  editedItemIndex: number;\r\n  editedItem: Ingredient;\r\n\r\n  constructor(private shoppingService: ShoppingService) {}\r\n\r\n  ngOnInit() {\r\n    this.subscription = this.shoppingService.startedEditing.subscribe(\r\n      (index: number) => {\r\n        this.editMode = true;\r\n        this.editedItemIndex = index;\r\n        this.editedItem = this.shoppingService.getIngredient(index);\r\n        this.shoppingListForm.setValue({\r\n          name: this.editedItem.name,\r\n          amount: this.editedItem.amount,\r\n        });\r\n      }\r\n    );\r\n  }\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    const newIngredient = new Ingredient(form.value.name, form.value.amount);\r\n    if (this.editMode) {\r\n      this.shoppingService.updateIngredient(\r\n        this.editedItemIndex,\r\n        newIngredient\r\n      );\r\n    } else {\r\n      this.shoppingService.addIngredient(newIngredient);\r\n    }\r\n    this.editMode = false;\r\n    form.reset();\r\n  }\r\n\r\n  onClear() {\r\n    this.shoppingListForm.reset();\r\n    this.editMode = false;\r\n  }\r\n\r\n  onDelete() {\r\n    this.shoppingService.deleteIngredient(this.editedItemIndex);\r\n    this.onClear();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list-edit.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "shoppingService",
                        "type": "ShoppingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\r\n  <div class=\"col-xs-12\">\r\n    <form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\r\n      <div class=\"row\">\r\n        <div class=\"col-sm-5 form-group\">\r\n          <label for=\"name\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            class=\"form-control\"\r\n            name=\"name\"\r\n            ngModel\r\n            required\r\n          />\r\n        </div>\r\n        <div class=\"col-sm-2 form-group\">\r\n          <label for=\"name\">Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            id=\"amount\"\r\n            class=\"form-control\"\r\n            name=\"amount\"\r\n            ngModel\r\n            required\r\n            [pattern]=\"'^[1-9]+[0-9]*$'\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n          <button class=\"btn btn-success\" type=\"submit\" [disabled]=\"!f.valid\">\r\n            {{ editMode ? \"Update\" : \"Add\" }}\r\n          </button>\r\n          <button\r\n            *ngIf=\"editMode\"\r\n            class=\"btn btn-danger\"\r\n            type=\"button\"\r\n            (click)=\"onDelete()\"\r\n          >\r\n            Delete\r\n          </button>\r\n          <button class=\"btn btn-primary\" type=\"button\" (click)=\"onClear()\">\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-0bef012a9ab7a4da34aedd3062d8f5f078f15a9efd8388708133bd47cef22e9eddc5a2323db91f862186af585e6497d59359283ceaa927d2a993af6e36f0e1f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { SharedModule } from './shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, HeaderComponent],\r\n  imports: [BrowserModule.withServerTransition({ appId: 'serverApp' }), HttpClientModule, AppRoutingModule, SharedModule],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-f8ed7dd8bcdd5da25e1e6390e7897c848754e81b32cf4f1032356f15ed4b3e05d16a97774c437c434d753063401df08ed873117a30412aaccb82626c231ec88c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\r\n\r\nconst appRoutes: Routes = [\r\n  { path: '', redirectTo: '/recipes', pathMatch: 'full' },\r\n  {\r\n    path: 'recipes',\r\n    loadChildren: () =>\r\n      \"import('./recipes/recipes.module').then((rm) => rm.RecipesModule)\",\r\n  },\r\n  {\r\n    path: 'shopping',\r\n    loadChildren: () =>\r\n      \"import('./shopping/shopping.module').then((m) => m.ShoppingModule)\",\r\n  },\r\n  {\r\n    path: 'auth',\r\n    loadChildren: () => \"import('./auth/auth.module').then((m) => m.AuthModule)\",\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(appRoutes, {\r\n      preloadingStrategy: PreloadAllModules,\r\n      initialNavigation: 'enabledBlocking',\r\n    }),\r\n  ],\r\n  exports: [RouterModule],\r\n  bootstrap: [],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "id": "module-AppServerModule-58245f0cdc0c01883cbd4fcc80270cfc7e8071d2b734e4b533111a54c17c6b10c0e5b9af38a92c9388b64f395ace2df09c18c7dc8b07c8fa9d8102d07c6af808",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.server.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { ServerModule } from '@angular/platform-server';\r\n\r\nimport { AppModule } from './app.module';\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  imports: [AppModule, ServerModule],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppServerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-ca4fa5eb845e947f45bbcd98e2e7f595eca173224f59ac1bac43a81bb1a99822f8b6d787de01e34f9977a0da4620237dcc4ec47d21117410c95bbfe8a8faae7a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AuthComponent } from './auth.component';\r\nimport { SharedModule } from '../shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AuthComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    RouterModule.forChild([{ path: '', component: AuthComponent }]),\r\n    SharedModule,\r\n  ],\r\n})\r\nexport class AuthModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesModule",
            "id": "module-RecipesModule-08989f97240ff175106f3f59b7aea71ddcb0e7fe5fa0b963507677042ddace5f4d8ddcc18defe1dc1b166d19c082cb13f7467279a7bdb74395b714c133421469",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RecipesComponent } from './recipes.component';\r\nimport { RecipeListComponent } from './recipe-list/recipe-list.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { RecipeListItemComponent } from './recipe-list/recipe-list-item/recipe-list-item.component';\r\nimport { RecipeDetailComponent } from './recipe-detail/recipe-detail.component';\r\nimport { RecipeStartComponent } from './recipe-start/recipe-start.component';\r\nimport { RecipeEditComponent } from './recipe-edit/recipe-edit.component';\r\nimport { RecipesRoutingModule } from './recipes-routing.module';\r\nimport { SharedModule } from '../shared.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    SharedModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    RecipesRoutingModule,\r\n  ],\r\n  declarations: [\r\n    RecipesComponent,\r\n    RecipeListComponent,\r\n    RecipeListItemComponent,\r\n    RecipeDetailComponent,\r\n    RecipeStartComponent,\r\n    RecipeEditComponent,\r\n  ],\r\n})\r\nexport class RecipesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecipeDetailComponent"
                        },
                        {
                            "name": "RecipeEditComponent"
                        },
                        {
                            "name": "RecipeListComponent"
                        },
                        {
                            "name": "RecipeListItemComponent"
                        },
                        {
                            "name": "RecipeStartComponent"
                        },
                        {
                            "name": "RecipesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RecipesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RecipesRoutingModule",
            "id": "module-RecipesRoutingModule-106ebaa022d8083e360f0deb99eef917b6013bc7cd9b945c3535ed6411bcb78b7f90b25ffa29d2e904a4a55c6dd5f76f29e58a6f9941aa9445e270e74e485402",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/recipes/recipes-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RecipesComponent } from './recipes.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RecipeDetailComponent } from './recipe-detail/recipe-detail.component';\r\nimport { RecipeStartComponent } from './recipe-start/recipe-start.component';\r\nimport { RecipeEditComponent } from './recipe-edit/recipe-edit.component';\r\nimport { AuthGuard } from '../auth/auth.guard';\r\nimport { RecipesResolverService } from './recipes-resolver.service';\r\n\r\nconst appRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RecipesComponent,\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      { path: '', component: RecipeStartComponent },\r\n      { path: 'new', component: RecipeEditComponent },\r\n      {\r\n        path: ':id',\r\n        component: RecipeDetailComponent,\r\n        resolve: [RecipesResolverService],\r\n      },\r\n      {\r\n        path: ':id/edit',\r\n        component: RecipeEditComponent,\r\n        resolve: [RecipesResolverService],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(appRoutes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RecipesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-06a9cba7791b27d625cb56ebe0c64dd7579a43f35a3c77f2f8f8fc170fa0560e77108cf23aed0e993dae9087d9abeb224a9fb34fe7fea5afdaab1d14b7a2d7dc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AlertComponent } from './alert/alert.component';\r\nimport { LoadingSpinnerComponent } from './loading-spinner/loading-spinner.component';\r\nimport { DropdownDirective } from './directives/dropdown.directive';\r\n\r\n@NgModule({\r\n  declarations: [AlertComponent, LoadingSpinnerComponent, DropdownDirective],\r\n  imports: [CommonModule],\r\n  exports: [\r\n    AlertComponent,\r\n    LoadingSpinnerComponent,\r\n    DropdownDirective,\r\n    CommonModule,\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertComponent"
                        },
                        {
                            "name": "DropdownDirective"
                        },
                        {
                            "name": "LoadingSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingModule",
            "id": "module-ShoppingModule-0bb607f84523df20907d61626995b7fea13f9cbe5a711ad765cf3fa1653074e29f01cf737b8abf920bb5fb79686b5db274bf6337db610e94d9941f35fb52a0f7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping/shopping.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ShoppingComponent } from './shopping.component';\r\nimport { ShoppingListEditComponent } from './shopping-list/shopping-list-edit/shopping-list-edit.component';\r\nimport { ShoppingListComponent } from './shopping-list/shopping-list.component';\r\nimport { ShoppingRoutingModule } from './shopping-routing.module';\r\nimport { SharedModule } from '../shared.module';\r\n\r\n@NgModule({\r\n  imports: [SharedModule, FormsModule, RouterModule, ShoppingRoutingModule],\r\n  declarations: [\r\n    ShoppingComponent,\r\n    ShoppingListComponent,\r\n    ShoppingListEditComponent,\r\n  ],\r\n})\r\nexport class ShoppingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingComponent"
                        },
                        {
                            "name": "ShoppingListComponent"
                        },
                        {
                            "name": "ShoppingListEditComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingRoutingModule",
            "id": "module-ShoppingRoutingModule-03e7af31b98adc4ebc7d35f5100497ae7aa55141fd0bffc2b5c98852dae04ee09a968a66bfce364945fe08d8a97788d67a71b69018c0c424e60488a5db92c74f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shopping/shopping-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ShoppingComponent } from './shopping.component';\r\n\r\nconst appRoutes: Routes = [{ path: '', component: ShoppingComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(appRoutes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ShoppingRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "NodeRequire"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(mainModule && mainModule.filename) || ''"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Header/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<HeaderComponent>",
                "defaultValue": "(args: HeaderComponent) => ({\n  moduleMetadata: {\n    providers: [\n      { provide: RecipesService, useClass: MockRecipesService }\n    ]\n  },\n  component: HeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "WithLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/components/Header/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "bootstrap",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NodeRequire"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(mainModule && mainModule.filename) || ''"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/components/Button/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/components/Header/Header.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Header/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<HeaderComponent>",
                    "defaultValue": "(args: HeaderComponent) => ({\n  moduleMetadata: {\n    providers: [\n      { provide: RecipesService, useClass: MockRecipesService }\n    ]\n  },\n  component: HeaderComponent,\n  props: args,\n})"
                },
                {
                    "name": "WithLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/components/Header/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ],
            "src/main.ts": [
                {
                    "name": "bootstrap",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth-intercepter.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthIntercepterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponseData",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/dropdown.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DropdownDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/loading-spinner/loading-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/models/ingredient.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/models/recipe.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-detail/recipe-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-edit/recipe-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-list/recipe-list-item/recipe-list-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-list/recipe-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipe-start/recipe-start.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeStartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes-resolver.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RecipesResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/recipes/recipes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecipesService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping/shopping-list/shopping-list-edit/shopping-list-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping/shopping.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping/shopping.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/components/Header/Header.stories.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MockRecipesService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Header/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/components/Header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}